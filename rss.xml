<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[My Musings]]></title><description><![CDATA[Inside the rabbit holes of 'Why' and 'How']]></description><link>https://govardhangdg.github.com</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 04 Feb 2020 10:58:36 GMT</lastBuildDate><item><title><![CDATA[Event Loop in Python]]></title><description><![CDATA[In the last post, we implemented futures in python. We used threads to complete tasks that weren’t trivial computations (i.e, operations…]]></description><link>https://govardhangdg.github.com/event_loop/</link><guid isPermaLink="false">https://govardhangdg.github.com/event_loop/</guid><pubDate>Tue, 04 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the [last post], we implemented futures in python. We used threads to complete tasks that weren’t trivial computations (i.e, operations that took &lt;em&gt;more&lt;/em&gt; time, like reading a file, waiting for a given amount of time etc.). In this post we shall see how to implement a &lt;em&gt;runtime&lt;/em&gt; that can handle these time-taking operations in a &lt;em&gt;single thread&lt;/em&gt;, with the help of operating system (&lt;em&gt;this means that we will be offloading the tasks to the operating system&lt;/em&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: I will be using Linux here. The code may not run on other platforms. But most of the platforms have some kind of an analogue to all the system calls used here&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The implementation is inspired from &lt;em&gt;asynchronous runtimes&lt;/em&gt; like &lt;em&gt;NodeJS&lt;/em&gt; and &lt;em&gt;TokioRS&lt;/em&gt;. The concept shall remain the same, albeit our implementation will be simpler, providing support only for &lt;em&gt;delay&lt;/em&gt; and &lt;em&gt;reading from sockets&lt;/em&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wanted to make this still simpler by reading from normal files, but the linux syscall used in implementation, &lt;strong&gt;epoll&lt;/strong&gt; doesn’t support the regular files, so I resorted to using sockets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even though the runtimes like &lt;em&gt;NodeJS&lt;/em&gt; and &lt;em&gt;TokioRS&lt;/em&gt; are extremely complex and can seem like magic, the principle behind them is pretty simple, once you dig into their source. They contain a loop, called the &lt;strong&gt;&lt;em&gt;Event Loop&lt;/em&gt;&lt;/strong&gt;. The &lt;em&gt;event loop&lt;/em&gt; is a &lt;strong&gt;&lt;em&gt;semi-infinite loop&lt;/em&gt;&lt;/strong&gt; (This loop ends when there is no longer need for it, i.e, there are no more tasks to be scheduled onto the thread and there are no tasks waiting for events to occur). &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;More Info&lt;/a&gt;
The NodeJS event loop works in &lt;em&gt;stages&lt;/em&gt;. Single iteration of the loop is called a &lt;strong&gt;&lt;em&gt;tick&lt;/em&gt;&lt;/strong&gt;. So every tick contains the following stages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Timers&lt;/strong&gt;: this phase executes callbacks scheduled by setTimeout() and setInterval().
pending callbacks: executes I/O callbacks deferred to the next loop iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Idle, prepare&lt;/strong&gt;: only used internally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Poll&lt;/strong&gt;: retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and setImmediate()); node will block here when appropriate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check&lt;/strong&gt;: setImmediate() callbacks are invoked here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Close callbacks&lt;/strong&gt;: some close callbacks, e.g. socket.on(‘close’, …).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, more information on these stages can be obtained from the &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;official Node docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The runtime/event loop that we will implement will take help from the &lt;em&gt;futures&lt;/em&gt; that we have already implemented. Our event loop will contain only two stages: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Timers&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Poll&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node uses only a &lt;em&gt;single thread&lt;/em&gt; to run both the JS code and also to monitor the files Node (&lt;a href=&quot;https://libuv.org/&quot;&gt;or libuv&lt;/a&gt;) uses &lt;em&gt;syscalls&lt;/em&gt; provided by the operating system to achieve this. The operating system has multiple threads, which can be used to keep track of the files and notify the user space program about it.&lt;/p&gt;
&lt;p&gt;We will run our event loop on a &lt;strong&gt;separate thread&lt;/strong&gt; and &lt;em&gt;communicate with it from the main thread to add events to watch for and also to get back the results of the asynchronous work on completion&lt;/em&gt;. Like Node, we will also be leveraging on the operating system provided file-descriptor-monitoring syscalls, in our case, it will be &lt;strong&gt;&lt;em&gt;epoll&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;linux-specific&lt;/em&gt;). &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our code will run only on linux platforms. Windows and MacOS provide IOCP and KQueue for similar purposes. They vary in the details of how they work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, our implementation is &lt;strong&gt;&lt;em&gt;tailored to our needs of being simple and using futures&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;First, let me define a few terms I will be using. &lt;strong&gt;&lt;em&gt;Tasks&lt;/em&gt;&lt;/strong&gt; refer to the top level things to be achieved. Any two tasks are &lt;em&gt;independent of each other&lt;/em&gt;. The tasks are made up of several &lt;strong&gt;&lt;em&gt;stages&lt;/em&gt;&lt;/strong&gt;. Stages are the subproblems to be solved in a sequential order, in order to complete the entire task. The stages are just &lt;em&gt;futures&lt;/em&gt; in our implementation. The tasks run &lt;em&gt;concurrently&lt;/em&gt;. There is almost no inter-dependence between two tasks. The stages of the same task are related by the &lt;em&gt;Happens-Before relationship&lt;/em&gt;, where one stage/future has to be completed before the next one starts. Also the former stage has to passes its result to the latter (&lt;em&gt;composition&lt;/em&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I won’t be getting into the details of the code in this post. However, I will show how the above mentioned ideas can be manifested into code. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The information required by the runtime is encoded in the class called &lt;strong&gt;&lt;em&gt;Runtime&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RunTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OrderedList&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;# Ordered list of time objects&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poller &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; select&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;epoll&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# every future will have different fileno, even though same file is &apos;opened&apos;&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pending &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, we need to handle timers. Our tasks can include stages that want us to wait for a certain time before moving on to the next one. In order to represent this requirement, we shall define &lt;strong&gt;&lt;em&gt;Delay&lt;/em&gt;&lt;/strong&gt; future. It will be the same as the &lt;strong&gt;&lt;em&gt;Delay&lt;/em&gt;&lt;/strong&gt; future defined in the previous post. But instead of making use of another thread for waiting, &lt;em&gt;it will ask our event loop to complete the future after the waiting time&lt;/em&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; runtime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    TimePoller&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; runtime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# completes (either pass or fail) after some time with a Result&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future
    
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TimePoller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve_time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resolve_value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; runtime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LoopTime&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve_time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resolve_value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register_timers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Looptime&lt;/em&gt;&lt;/strong&gt; object is used to &lt;em&gt;map&lt;/em&gt; the timer to the future that gets resolved when the time has passed. It also contains the value with which the future should be resolved after the specified time. But we need an &lt;em&gt;ordered list&lt;/em&gt;, with which we can efficiently perform &lt;em&gt;insert, search and delete&lt;/em&gt; operations on the set timers. We can use the &lt;em&gt;bisect&lt;/em&gt; python package to maintain an ordered list that is ordered by the time when the corresponding future has to be resolved.
The &lt;strong&gt;&lt;em&gt;register_timers&lt;/em&gt;&lt;/strong&gt; method on the &lt;strong&gt;&lt;em&gt;runtime&lt;/em&gt;&lt;/strong&gt; object, as the name says, is used to register the timer with the &lt;strong&gt;&lt;em&gt;runtime&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FileRead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; runtime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    FilePoller&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;future&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; runtime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future
    
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FilePoller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; runtime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        sock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AF_INET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SOCK_STREAM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setsockopt&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SOL_SOCKET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SO_REUSEADDR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bind&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;0.0.0.0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listen&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setblocking&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LoopFile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sock&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register_files&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to handle file reads, or the &lt;em&gt;socket&lt;/em&gt; reads to be specific ( as mentioned before, epoll doesn’t support normal files). Same as in timers, we use a modified &lt;strong&gt;&lt;em&gt;FileRead&lt;/em&gt;&lt;/strong&gt; future from the last post, which instead of spawning a new thread to read the file, *registers a &lt;strong&gt;&lt;em&gt;LoopFile&lt;/em&gt;&lt;/strong&gt; object with the event loop, which then sends back the file contents after the read operation is finished*. &lt;strong&gt;&lt;em&gt;LoopFile&lt;/em&gt;&lt;/strong&gt;, just like &lt;strong&gt;&lt;em&gt;LoopTime&lt;/em&gt;&lt;/strong&gt;, is used to contain information about a file (or socket), like, the &lt;em&gt;future associated with it, contents read etc&lt;/em&gt;. It works together with the &lt;strong&gt;&lt;em&gt;file_map&lt;/em&gt;&lt;/strong&gt; of the runtime object to achieve this. The file or &lt;em&gt;socket is read in a non-blocking way using the epoll&lt;/em&gt;, in the &lt;strong&gt;&lt;em&gt;edge-triggered mode&lt;/em&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember to open the socket in non-blocking mode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Runtime also contains a &lt;strong&gt;&lt;em&gt;poller&lt;/em&gt;&lt;/strong&gt;, which is an instance of &lt;em&gt;epoll&lt;/em&gt;. This is used to monitor the files and also complete the corresponding futures, when the file is read or the time has passed.
Runtime also has a method called &lt;strong&gt;&lt;em&gt;loop&lt;/em&gt;&lt;/strong&gt;, which is &lt;strong&gt;our actual event loop&lt;/strong&gt;. It’s a &lt;em&gt;semi-infinite loop&lt;/em&gt; which terminates when the number of pending operations goes to zero. We run the method in a &lt;strong&gt;separate thread&lt;/strong&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pending &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# timers&lt;/span&gt;
        a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove_completed_timers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resolve_value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# poll&lt;/span&gt;
        time_limit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_min_ms&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poll&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time_limit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In every &lt;em&gt;tick&lt;/em&gt; (or iteration) of the loop, the &lt;em&gt;expired timers are removed&lt;/em&gt; and the &lt;em&gt;corresponding futures are completed&lt;/em&gt;. Then the &lt;em&gt;files(sockets) are polled&lt;/em&gt;, and if possible &lt;strong&gt;&lt;em&gt;completed&lt;/em&gt;&lt;/strong&gt; using the poll method, which uses the epoll and edge-triggered, non-blocking file descriptors to achieve the task.
In order to account for the possible errors, our runtime completes the futures with &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; objects specified in the previous post.  In short, the &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; objects are &lt;em&gt;monads&lt;/em&gt; similar to &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; enum in Rust or &lt;strong&gt;&lt;em&gt;Either&lt;/em&gt;&lt;/strong&gt; in Haskell. The &lt;strong&gt;&lt;em&gt;Future&lt;/em&gt;&lt;/strong&gt; objects know how to handle a &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; object. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time_limit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    events &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poll&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timeout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;time_limit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; fileno&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; events&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            connection&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;accept&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setblocking&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; select&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EPOLLET &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; select&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EPOLLIN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; connection
            self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;del&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unregister&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    l &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;recv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;self file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resolve_value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;del&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unregister&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
                    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resolve_value &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                
            &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; errno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EWOULDBLOCK&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;del&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poller&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unregister&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileno&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;poll&lt;/em&gt;&lt;/strong&gt; method reads the contents from the socket after a connection is formed. The contents are read in a &lt;em&gt;non-blocking&lt;/em&gt; fashion. The poller works with the sockets in the &lt;strong&gt;&lt;em&gt;edge-triggered mode&lt;/em&gt;&lt;/strong&gt;. So it’s the responsibility of the user (of poller) to completely read the socket, before moving on, else data can be lost.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first message on the listening socket is a connection request. Form the connection and then start reading from the connection. Suitably, state has to be maintained.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, as you can see, the concepts behind the event loop and asynchronous runtimes is pretty simple. What makes them complex is the presence of a wide array of moving parts, which have to work asynchronously.
&lt;a href=&quot;https://tokio.rs/&quot;&gt;TokioRS&lt;/a&gt; and &lt;a href=&quot;https://async.rs/&quot;&gt;async-std&lt;/a&gt; are two such asynchronous runtimes that I am interested in.  &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Futures in Python]]></title><description><![CDATA[In the last post, we saw the importance of composition in programming. Futures are a way to effectively introduce composition in concurrent…]]></description><link>https://govardhangdg.github.com/futures/</link><guid isPermaLink="false">https://govardhangdg.github.com/futures/</guid><pubDate>Mon, 03 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the last post, we saw the importance of composition in programming. Futures are a way to effectively introduce composition in concurrent programming. In this post we will see how futures can be implemented in python.&lt;/p&gt;
&lt;p&gt;Futures are derived from &lt;em&gt;category theory&lt;/em&gt;, a branch of mathematics that deals with abstract concepts. Futures are a type of &lt;strong&gt;&lt;em&gt;Monads&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will be writing a post on monads and their varied  uses in programming shortly, where I will cover the theory behind futures as well. This post assumes you know what futures are and how they are related to monads.  If you are not familiar with monads, &lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt; can act as a good crash course for the same.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A future can be considered as a &lt;em&gt;state machine&lt;/em&gt;. It has &lt;em&gt;two&lt;/em&gt; states. &lt;em&gt;Unresolved&lt;/em&gt; and &lt;em&gt;resolved&lt;/em&gt;. Once resolved, a future is &lt;em&gt;immutable&lt;/em&gt;. It can’t go back to being unresolved or change the value it was resolved with. A future can be resolved because an operation was successful or even when the operation was unsuccessful but complete. So, the future has &lt;em&gt;support for error handling built-in&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;One can attach certain operations that have to be completed once the future is resolved (either successfully or unsuccessfully). I call it, &lt;em&gt;showing interest in the value of the future&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Future is always resolved as a result of occurrences, &lt;em&gt;external to the future&lt;/em&gt;. Like the arrival of a message or passing of a certain period of time. This is to say that a &lt;em&gt;future can’t change its state on its own&lt;/em&gt;. So we have to arrange for a way to complete or resolve the future, when we create one. &lt;/p&gt;
&lt;p&gt;Now that we know enough concepts, let us have a look at how these ideas can be manifested in code.
First, let’s define a class that represents a Future. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pending_requests &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;completed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;completed&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            fn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pending_requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;completed&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt; FutureAlreadyResolved&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;completed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; fn &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pending_requests&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            fn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pending_requests &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;completed&lt;/em&gt;&lt;/strong&gt; fields are used to provide information about the current state of the future. The &lt;strong&gt;&lt;em&gt;request&lt;/em&gt;&lt;/strong&gt; method is used to register an operation that has interest in the value that the future resolves to. The registered operations (mostly functions) are stored in the &lt;strong&gt;&lt;em&gt;pending_requests&lt;/em&gt;&lt;/strong&gt; field of the Future.
The &lt;strong&gt;&lt;em&gt;complete&lt;/em&gt;&lt;/strong&gt; method is passed to some other part of the code, which completes the future on the occurrence of a certain event. When a future is resolved or completed, &lt;em&gt;all the operations that are registered with it are executed, passing the value that the future resolved to&lt;/em&gt;.
Now we can do things like attaching the print operation to the future using the &lt;strong&gt;&lt;em&gt;request&lt;/em&gt;&lt;/strong&gt; method on the future, which prints the value the future resolves to, once it’s resolved using the completed method from some other part of the code.&lt;/p&gt;
&lt;p&gt;The Future works as expected, &lt;em&gt;but is useless on its own&lt;/em&gt;. The true advantage of using Futures over simple event based execution (or callbacks ) is the &lt;strong&gt;ability to compose concurrent operations&lt;/strong&gt;. Two futures, each representing a concurrent operation, can be composed to represent a bigger concurrent operation that is the combination of the two smaller concurrent operations. This bigger future can be passed around, composed with other futures, in a sequential or parallel fashion, in order to represent a much complex concurrent operation. &lt;/p&gt;
&lt;p&gt;Let’s start with performing a &lt;em&gt;trivial&lt;/em&gt; (one that doesn’t take much time or doesn’t return another future) operation like converting the resolved value into string and prepending it with the phrase &lt;em&gt;Monkey D Luffy&lt;/em&gt;. We need to create a new future that represents this transformation on the resolved value of the original future. This is similar to the &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; operation on arrays in JS or python. You create a new array (or modify the original) with values that is formed by applying the transformation on each of the entries of the original array. This is the idea of a &lt;em&gt;Functor in category theory ( and functional programming)&lt;/em&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will explain the uses of various functors in programming in an upcoming post &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, we need to make our futures a &lt;em&gt;Functor&lt;/em&gt;. We can do this by adding a method to our future &lt;em&gt;that takes in a function and gives out another future that is the result of applying this function on the resolved value of the original future&lt;/em&gt;. Remember that the original future need not be already resolved when we make this connection between the newly formed future and the original one. But when the original future is resolved, we need to resolve the new future as well with the modified resolved value.
This can be expressed in code as a method on the future, which takes in a function and gives out a new future that is resolved when the original future is resolved. This is achieved by specifying that the new future is interested in the value of the old one (using the &lt;strong&gt;&lt;em&gt;request&lt;/em&gt;&lt;/strong&gt; method on the original future).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if the function that we passed also returns a future? How do we deal with this? If we simply use the &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; method here, we will end up &lt;em&gt;with a future within another future condition&lt;/em&gt;. How do we make sense of this?&lt;/p&gt;
&lt;p&gt;If the passed function (&lt;strong&gt;&lt;em&gt;fn&lt;/em&gt;&lt;/strong&gt; in the code) returns a future, then it means that we have to resolve the future that &lt;strong&gt;&lt;em&gt;fn&lt;/em&gt;&lt;/strong&gt; returned, before resolving the future:  &lt;strong&gt;&lt;em&gt;future&lt;/em&gt;&lt;/strong&gt;. Yes, I know it’s confusing…
So, this can be done in code as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;and_then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;complete_new_future&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        new_future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        new_future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;complete_new_future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, when the original future (&lt;strong&gt;&lt;em&gt;self&lt;/em&gt;&lt;/strong&gt;) is completed, we run the &lt;strong&gt;&lt;em&gt;fn&lt;/em&gt;&lt;/strong&gt; function, which gives us the &lt;strong&gt;&lt;em&gt;new_future&lt;/em&gt;&lt;/strong&gt;. We need our future to be resolved with the value that &lt;strong&gt;&lt;em&gt;new_future&lt;/em&gt;&lt;/strong&gt; gets resolved to. So we make a connection between the &lt;strong&gt;&lt;em&gt;new_future&lt;/em&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;future&lt;/em&gt;&lt;/strong&gt; such that when &lt;strong&gt;&lt;em&gt;new_future&lt;/em&gt;&lt;/strong&gt; is completed (again, this should be done as a part of the &lt;strong&gt;&lt;em&gt;fn&lt;/em&gt;&lt;/strong&gt; function), it (&lt;strong&gt;&lt;em&gt;new_future&lt;/em&gt;&lt;/strong&gt;) completes the &lt;strong&gt;&lt;em&gt;future&lt;/em&gt;&lt;/strong&gt; as well. So there is no scope for a &lt;em&gt;future within a future scenario&lt;/em&gt;. This behaviour of the futures make them a &lt;strong&gt;monad&lt;/strong&gt;. (&lt;em&gt;Strictly speaking, there is more to a monad than just this feature. But this is enough for our purposes&lt;/em&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a new future is created, a way to complete it should be arranged immediately&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;and_then&lt;/em&gt;&lt;/strong&gt; functions work when you already know if the passed function (&lt;strong&gt;&lt;em&gt;fn&lt;/em&gt;&lt;/strong&gt;) returns a future or not. (These functions are similar to the &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;and_then&lt;/em&gt;&lt;/strong&gt; functions used in Rust for &lt;strong&gt;&lt;em&gt;Future&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Option&lt;/em&gt;&lt;/strong&gt; etc.)&lt;/p&gt;
&lt;p&gt;But what if we don’t know beforehand the nature of the passed function? JS’s then function handles both kind functions. Let’s define a similar then function ourselves, which depending on the type of the return value of the function, handles the situation aptly. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;complete_new_future&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            new &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                new&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;complete_new_future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;isinstance&lt;/em&gt;&lt;/strong&gt; call is used to choose whether to behave like &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; function or as &lt;strong&gt;&lt;em&gt;and_then&lt;/em&gt;&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;So, yeah we have our own future implementation. Let’s try it out.We saw how to request a future to some operation when it’s completed and also how to get a new future from an old one.But how do we create a future in the first place? Let’s see some examples.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; This is the simplest possible way to create a future. You just enclose a value in the future covering. This process is called &lt;strong&gt;Lifting&lt;/strong&gt; (imagine the normal values are present in the bottom layer and the future enclosed values are present in the upper layer). You just complete the function immediately, right after you create it. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    TimePoller&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ms &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future
    
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimePoller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time_in_seconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resolve_value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; time_in_seconds
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resolve_value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resolve_value
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; future
        threading&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Thread&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poll&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resolve_value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Delay&lt;/em&gt;&lt;/strong&gt; creates a future and arranges a way to complete it. This arrangement is in the form of the &lt;strong&gt;&lt;em&gt;Timepoller&lt;/em&gt;&lt;/strong&gt; object, which uses a &lt;em&gt;separate thread&lt;/em&gt; to complete the future after the specified time period. &lt;/p&gt;
&lt;p&gt;Similarly the &lt;strong&gt;&lt;em&gt;FileRead&lt;/em&gt;&lt;/strong&gt; creates a future which is completed by a separate thread with the file contents read. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FileRead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    FilePoller&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future
    
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FilePoller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; filename
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; future
        threading&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Thread&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;poll&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            contents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;contents&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, you can do things like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Delay&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;readme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;capitalize&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FileRead&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;capitalize&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks a lot like &lt;em&gt;JS Promises&lt;/em&gt;. Now, if observed closely, there is &lt;em&gt;only the happy path&lt;/em&gt;. What if something goes wrong while reading the file? What is the specified file is not there? So we need error handling. The error handling that I came up with is similar to the &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; monad in Rust or &lt;strong&gt;&lt;em&gt;Either&lt;/em&gt;&lt;/strong&gt; in Haskell. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; error
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            v &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error
                &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;correct_error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            v &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error
                &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you observe closely, the &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; class is also a &lt;em&gt;monad&lt;/em&gt;. It has two ways to convert a &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; object into another &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; object: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;correct_error&lt;/em&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;flat_map&lt;/em&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;flat_map&lt;/em&gt;&lt;/strong&gt; is used for the happy path, when the &lt;strong&gt;&lt;em&gt;self&lt;/em&gt;&lt;/strong&gt; object contains &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; and not the &lt;strong&gt;&lt;em&gt;error&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;correct_error&lt;/em&gt;&lt;/strong&gt; is for the unhappy path. Both take in a function that works on appropriate fields of the &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; object and return a new &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt; object. This can be merged with our futures, by making sure that the &lt;strong&gt;&lt;em&gt;Future&lt;/em&gt;&lt;/strong&gt; is always completed with &lt;strong&gt;&lt;em&gt;Result&lt;/em&gt;&lt;/strong&gt;, instead of plain values and changing our then function as follows,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    future &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;complete_new_future1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# receives a normal value as this is called from the flat_map&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;from the complete_new_future: before finding new&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            new &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                new&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;complete_new_future2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# receives a normal value as this is called from the check_error&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            new &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                new&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;complete_new_future1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; complete_new_future2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; future&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can do things like, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x
f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Delay&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;“readme&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;capitalize&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Future&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FileRead&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;capitalize&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;then&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;there has been some kind of an error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks similar to &lt;em&gt;JS Promises&lt;/em&gt; as well (the version where you provide both the success and error handlers to every then call). You can build on this code to implement parallels to &lt;em&gt;Promise.All&lt;/em&gt; etc.&lt;/p&gt;
&lt;p&gt;One thing I’d advise anyone who wants to do a similar thing is to use a statically typed language. The presence of a compiler that checks the type of function return values being passed into other functions makes it a lot easier to debug code.
In the next post we will see how to use the futures implemented here to design a simple &lt;strong&gt;&lt;em&gt;event loop&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>